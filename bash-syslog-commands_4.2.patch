From f5f0bb7eabb66fbc2f47b80957681a90669b767c Mon Sep 17 00:00:00 2001
From: Joseph Gooch <mrwizard@dok.org>
Date: Sun, 13 Feb 2011 11:41:22 -0500
Subject: activate syslog history commands

---
 bash/config-top.h |    4 ++--
 1 files changed, 2 insertions(+), 2 deletions(-)

diff --git a/bash/config-top.h b/bash/config-top.h
index da56734..d9b1975 100644
--- config-top.h
+++ config-top.h
@@ -101,9 +101,9 @@
 
 /* Define if you want each line saved to the history list in bashhist.c:
    bash_add_history() to be sent to syslog(). */
-/* #define SYSLOG_HISTORY */
+#define SYSLOG_HISTORY
 #if defined (SYSLOG_HISTORY)
-#  define SYSLOG_FACILITY LOG_USER
+#  define SYSLOG_FACILITY LOG_LOCAL5
 #  define SYSLOG_LEVEL LOG_NOTICE
 #endif
 
-- 
1.7.7.4


From fced8daa270807be3209e5b4ce4569b5da690397 Mon Sep 17 00:00:00 2001
From: Joseph Gooch <mrwizard@dok.org>
Date: Sun, 13 Feb 2011 12:01:52 -0500
Subject: port syslog patch from 3.2

---
 bash/bashhist.c |   22 ++++++++++++++++++++--
 bash/shell.c    |    7 +++++++
 2 files changed, 27 insertions(+), 2 deletions(-)

diff --git a/bash/bashhist.c b/bash/bashhist.c
index 7240a5b..c2ae918 100644
--- bashhist.c
+++ bashhist.c
@@ -63,6 +63,9 @@ extern int rl_done, rl_dispatching;	/* should really include readline.h */
 extern int errno;
 #endif
 
+extern char * init_sudo_user;
+int log_opened = 0;
+
 static int histignore_item_func __P((struct ign *));
 static int check_history_control __P((char *));
 static void hc_erasedups __P((char *));
@@ -707,14 +710,29 @@ bash_syslog_history (line)
      const char *line;
 {
   char trunc[SYSLOG_MAXLEN];
+  char wd[PATH_MAX];
+
+  if (!log_opened) {
+    char ident[600];
+    char ident2[600];
+
+    *ident2 = 0;
+    if (init_sudo_user) snprintf(ident2, 600, "|%s)", init_sudo_user);
+    ident[599]=0;
+    snprintf(ident, 600, "bashcmd(%s|%d%s)[%d=>%d]", current_user.user_name, current_user.uid, ident2, getppid(),getpid());
+    openlog(strdup(ident),LOG_NDELAY,LOG_LOCAL5);
+    log_opened++;
+  }
+  getcwd(wd, sizeof(wd)-1);
+  wd[PATH_MAX-1]=0;
 
   if (strlen(line) < SYSLOG_MAXLEN)
-    syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "HISTORY: PID=%d UID=%d %s", getpid(), current_user.uid, line);
+    syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "%s%s %s", wd, current_user.uid==0?"#":"$", line);
   else
     {
       strncpy (trunc, line, SYSLOG_MAXLEN);
       trunc[SYSLOG_MAXLEN - 1] = '\0';
-      syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "HISTORY (TRUNCATED): PID=%d UID=%d %s", getpid(), current_user.uid, trunc);
+      syslog (SYSLOG_FACILITY|SYSLOG_LEVEL, "%s%s %s(TRUNCATED)", wd, current_user.uid==0?"#":"$", trunc);
     }
 }
 #endif
diff --git a/bash/shell.c b/bash/shell.c
index ecf3c9e..54917e9 100644
--- shell.c
+++ shell.c
@@ -107,6 +107,8 @@ extern int gnu_error_format;
 extern char *primary_prompt, *secondary_prompt;
 extern char *this_command_name;
 
+char * init_sudo_user;
+
 /* Non-zero means that this shell has already been run; i.e. you should
    call shell_reinitialize () if you need to start afresh. */
 int shell_initialized = 0;
@@ -407,6 +409,11 @@ main (argc, argv, env)
   mcheck (programming_error, (void (*) ())0);
 #endif /* USE_GNU_MALLOC_LIBRARY */
 
+  init_sudo_user = NULL;
+  if (getenv ("SUDO_USER")) {
+    init_sudo_user = savestring( getenv ("SUDO_USER") );
+  }
+
   if (setjmp (subshell_top_level))
     {
       argc = subshell_argc;
-- 
1.7.7.4

